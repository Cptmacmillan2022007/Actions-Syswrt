#=================================================
# https://github.com/Cptmacmillan2022007/Actions-Syswrt
# Description: Compile OpenWrt/LEDE with github actions project
# Lisence: GPL-3.0 license
#=================================================

name: Compile OpenWrt/LEDE system
on:
  workflow_dispatch:
  schedule:
    - cron: 0 8 * * *

env:
  CONFIG_FILE: config/x86-64.conf
  SOURCE_URL: https://github.com/coolsnowwolf/lede.git
  SOURCE_BRANCH: master
  FEEDS_SH: scripts/custom-feeds.sh
  SETTINGS_SH: scripts/custom-settings.sh
  COMBO_TAG: combo
  COMBO_RELEASE_UPLOAD: true
  FIRMWARE_RELEASE_UPLOAD: true
  TZ: Asia/Shanghai

jobs:
  Prebuild:
    runs-on: ubuntu-latest
    permissions: write-all

    outputs:
      OPENWRT_ROOT_PATH: ${{ steps.clone.outputs.OPENWRT_ROOT_PATH }}
      CURRENT_BRANCH: ${{ steps.env.outputs.CURRENT_BRANCH }}
      SOURCE_OWNER: ${{ steps.env.outputs.SOURCE_OWNER }}
      SOURCE_REPO: ${{ steps.env.outputs.SOURCE_REPO }}
      DEVICE_PLATFORM: ${{ steps.env.outputs.DEVICE_PLATFORM }}
      DEVICE_TARGET: ${{ steps.env.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ steps.env.outputs.DEVICE_SUBTARGET }}
      COMBO_IMAGE: ${{ steps.env.outputs.COMBO_IMAGE }}

    steps:
      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq full-upgrade
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev python3-setuptools
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          docker image prune -a -f
          mkdir -p workdir

      - name: Checkout
        uses: actions/checkout@main

      - name: Clone Source Code
        id: clone
        run: |
          df -hT $PWD
          git clone $SOURCE_URL -b $SOURCE_BRANCH workspace/openwrt
          cd workspace/openwrt
          echo "OPENWRT_ROOT_PATH=$PWD" >> $GITHUB_ENV
          echo "OPENWRT_ROOT_PATH=$(echo $PWD)" >> $GITHUB_OUTPUT

      - name: Generate Toolchain Config
        run: |
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_ROOT_PATH/.config
          echo -e "\nCONFIG_ALL=y" >> $OPENWRT_ROOT_PATH/.config
          echo -e "\nCONFIG_ALL_NONSHARED=y" >> $OPENWRT_ROOT_PATH/.config
          cd $OPENWRT_ROOT_PATH
          make defconfig > /dev/null 2>&1

      - name: Generate Variables
        id: env
        run: |
          export CURRENT_BRANCH="$(git symbolic-ref --short HEAD)"
          echo "CURRENT_BRANCH=$CURRENT_BRANCH" >> $GITHUB_ENV
          echo "CURRENT_BRANCH=$(echo $CURRENT_BRANCH)" >> $GITHUB_OUTPUT
          export BUILD_DATE=$(date +"%Y-%m-%d")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          cd $OPENWRT_ROOT_PATH
          export SOURCE_OWNER="$(echo $SOURCE_URL | awk -F '/' '{print $(NF-1)}')"
          echo "SOURCE_OWNER=$SOURCE_OWNER" >> $GITHUB_ENV
          echo "SOURCE_OWNER=$(echo $SOURCE_OWNER)" >> $GITHUB_OUTPUT
          export SOURCE_REPO="$(echo $SOURCE_URL | awk -F '/' '{print $(NF)}')"
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          echo "SOURCE_REPO=$(echo $SOURCE_REPO)" >> $GITHUB_OUTPUT
          export DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          echo "DEVICE_TARGET=$(echo $DEVICE_TARGET)" >> $GITHUB_OUTPUT
          export DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$(echo $DEVICE_SUBTARGET)" >> $GITHUB_OUTPUT
          export DEVICE_PLATFORM=$(cat .config | grep CONFIG_TARGET_ARCH_PACKAGES | awk -F '"' '{print $2}')
          echo "DEVICE_PLATFORM=$DEVICE_PLATFORM" >> $GITHUB_ENV
          echo "DEVICE_PLATFORM=$(echo $DEVICE_PLATFORM)" >> $GITHUB_OUTPUT
          export COMBO_IMAGE="combo-$SOURCE_OWNER-$SOURCE_REPO-$SOURCE_BRANCH-$DEVICE_TARGET-$DEVICE_SUBTARGET"
          echo "COMBO_IMAGE=$COMBO_IMAGE" >> $GITHUB_ENV
          echo "COMBO_IMAGE=$(echo $COMBO_IMAGE)" >> $GITHUB_OUTPUT

      - name: Compare Combo Hash
        id: combohash
        run: |
          cd $OPENWRT_ROOT_PATH
          export COMBO_HASH=$(git log --pretty=tformat:"%H" -n1 tools toolchain)
          echo "COMBO_HASH=$COMBO_HASH" >> $GITHUB_ENV
          echo "COMBO_HASH=$(echo $COMBO_HASH)" >> $GITHUB_OUTPUT
          echo "COMBO_HASH is $COMBO_HASH"
          export COMBOCACHE_HASH=$(curl -fSsL https://github.com/$GITHUB_REPOSITORY/releases/download/$COMBO_TAG/$COMBO_IMAGE.hash)
          echo "COMBOCACHE_HASH is $COMBOCACHE_HASH"
          if [ -z "$COMBOCACHE_HASH" ] || [ "$COMBO_HASH" != "$COMBOCACHE_HASH" ]; then
            echo "REBUILD_COMBO=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Preload Toolchain Feeds
        if: steps.combohash.outputs.REBUILD_COMBO == 'true'
        run: |
          cd $OPENWRT_ROOT_PATH
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          make defconfig

      - name: Compile Tools
        if: steps.combohash.outputs.REBUILD_COMBO == 'true'
        run: |
          cd $OPENWRT_ROOT_PATH
          echo -e "$(nproc) thread compile"
          make tools/compile -j$(nproc) || make tools/compile -j1 V=s

      - name: Compile Toolchain
        if: steps.combohash.outputs.REBUILD_COMBO == 'true'
        run: |
          cd $OPENWRT_ROOT_PATH
          echo -e "$(nproc) thread compile"
          make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
          rm -rf .config* bin

      - name: Load Custom Feeds
        if: steps.combohash.outputs.REBUILD_COMBO == 'true'
        run: |
          [ -e $FEEDS_SH ] && cp -r $FEEDS_SH $OPENWRT_ROOT_PATH/$FEEDS_SH
          cd $OPENWRT_ROOT_PATH
          chmod +x $FEEDS_SH
          $OPENWRT_ROOT_PATH/$FEEDS_SH

      - name: Install DL Feeds
        if: steps.combohash.outputs.REBUILD_COMBO == 'true'
        run: |
          cd $OPENWRT_ROOT_PATH
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load Custom Configuration
        if: steps.combohash.outputs.REBUILD_COMBO == 'true'
        run: |
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_ROOT_PATH/.config
          [ -e $SETTINGS_SH ] && cp $SETTINGS_SH $OPENWRT_ROOT_PATH/$SETTINGS_SH
          cd $OPENWRT_ROOT_PATH
          chmod +x $SETTINGS_SH
          $OPENWRT_ROOT_PATH/$SETTINGS_SH
          make defconfig

      - name: Download DL Package
        id: download
        run: |
          cd $OPENWRT_ROOT_PATH
          make download -j64

      - name: Generate Toolchain Image
        if: steps.combohash.outputs.REBUILD_COMBO == 'true'
        run: |
          cd workspace
          mksquashfs openwrt $COMBO_IMAGE -force-gid 1001 -force-uid 1001 -comp zstd -Xcompression-level 22
          mkdir -p $GITHUB_WORKSPACE/output
          split -d -b 1900M $COMBO_IMAGE $GITHUB_WORKSPACE/output/$COMBO_IMAGE.img.
          rm $COMBO_IMAGE
          cd $OPENWRT_ROOT_PATH
          echo $COMBOCACHE_HASH > $GITHUB_WORKSPACE/output/combo-$SOURCE_OWNER-$SOURCE_REPO-$SOURCE_BRANCH-$DEVICE_TARGET-$DEVICE_SUBTARGET.hash
          ls -lh $GITHUB_WORKSPACE/output

      - name: Delete Old Combo Assets From Release
        if: env.COMBO_RELEASE_UPLOAD == 'true' && steps.combohash.outputs.REBUILD_COMBO == 'true'
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.COMBO_TAG }}
          assets: "combo-${{ env.COMBO_IMAGE }}.*"
          fail-if-no-assets: false
          fail-if-no-release: false

      - name: Upload Combo Image To Release
        if: env.COMBO_RELEASE_UPLOAD == 'true' && steps.combohash.outputs.REBUILD_COMBO == 'true'
        uses: ncipollo/release-action@main
        with:
          name: combo-image
          allowUpdates: true
          replacesArtifacts: true
          tag: ${{ env.COMBO_TAG }}
          body: ${{ env.BUILD_DATE }}
          commit: ${{ env.CURRENT_BRANCH }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: output/*

  Mainbuild:
    needs: [Prebuild]
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Restore Variables
        run: |
          echo "CURRENT_BRANCH=$(echo '${{needs.Prebuild.outputs.CURRENT_BRANCH}}')" >> $GITHUB_ENV
          echo "OPENWRT_ROOT_PATH=$(echo '${{needs.Prebuild.outputs.OPENWRT_ROOT_PATH}}')" >> $GITHUB_ENV
          echo "SOURCE_OWNER=$(echo '${{needs.Prebuild.outputs.SOURCE_OWNER}}')" >> $GITHUB_ENV
          echo "SOURCE_REPO=$(echo '${{needs.Prebuild.outputs.SOURCE_REPO}}')" >> $GITHUB_ENV
          echo "DEVICE_PLATFORM=$(echo '${{needs.Prebuild.outputs.DEVICE_PLATFORM}}')" >> $GITHUB_ENV
          echo "DEVICE_TARGET=$(echo '${{needs.Prebuild.outputs.DEVICE_TARGET}}')" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$(echo '${{needs.Prebuild.outputs.DEVICE_SUBTARGET}}')" >> $GITHUB_ENV
          echo "COMBO_IMAGE=$(echo '${{needs.Prebuild.outputs.COMBO_IMAGE}}')" >> $GITHUB_ENV

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq full-upgrade
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev python3-setuptools
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          docker image prune -a -f

      - name: Combine Disks
        run: |
          sudo swapoff -a
          sudo rm -f /mnt/swapfile
          export ROOT_FREE_KB=$(df --block-size=1024 --output=avail / | tail -1)
          export ROOT_LOOP_KB=$(expr $ROOT_FREE_KB - 1048576)
          export ROOT_LOOP_BYTES=$(expr $ROOT_LOOP_KB \* 1024)
          sudo fallocate -l $ROOT_LOOP_BYTES /root.img
          export ROOT_LOOP_DEVNAME=$(sudo losetup -Pf --show /root.img)
          sudo pvcreate -f $ROOT_LOOP_DEVNAME
          export MNT_FREE_KB=$(df --block-size=1024 --output=avail /mnt | tail -1)
          export MNT_LOOP_KB=$(expr $MNT_FREE_KB - 102400)
          export MNT_LOOP_BYTES=$(expr $MNT_LOOP_KB \* 1024)
          sudo fallocate -l $MNT_LOOP_BYTES /mnt/mnt.img
          export MNT_LOOP_DEVNAME=$(sudo losetup -Pf --show /mnt/mnt.img)
          sudo pvcreate -f $MNT_LOOP_DEVNAME
          sudo vgcreate vgstorage $ROOT_LOOP_DEVNAME $MNT_LOOP_DEVNAME
          sudo lvcreate -n lvstorage -l 100%FREE vgstorage
          export LV_DEVNAME=$(sudo lvscan | awk -F "'" '{print $2}')
          sudo mkfs.btrfs -L combinedisk $LV_DEVNAME
          sudo mount -o compress=zstd $LV_DEVNAME $GITHUB_WORKSPACE
          sudo chown -R runner:runner $GITHUB_WORKSPACE
          mkdir $GITHUB_WORKSPACE/tmp
          chmod 777 $GITHUB_WORKSPACE/tmp
          sudo cp -rp /tmp/* $GITHUB_WORKSPACE/tmp
          sudo mount -B $GITHUB_WORKSPACE/tmp /tmp
          df -hT $GITHUB_WORKSPACE
          sudo btrfs filesystem usage $GITHUB_WORKSPACE

      - name: Checkout
        run: |
          cd $GITHUB_WORKSPACE
          git init
          git remote add origin https://github.com/$GITHUB_REPOSITORY
          git fetch
          git checkout -t origin/$CURRENT_BRANCH

      - name: Prepare Combo Image Form Releases
        if: env.COMBO_RELEASE_UPLOAD == 'true'
        run: |
          mkdir -p workspace
          cd workspace
          for i in {0..9}
          do
            curl -fsL https://github.com/$GITHUB_REPOSITORY/releases/download/$COMBO_TAG/$COMBO_IMAGE.img.0$i >> $COMBO_IMAGE.img || break
          done
          mkdir openwrt-ro openwrt workdir overlay
          sudo mount -o loop $TOOLCHAIN_IMAGE.img openwrt-ro
          sudo mount -t overlay overlay -o lowerdir=openwrt-ro,upperdir=overlay,workdir=workdir openwrt
          cd $OPENWRT_ROOT_PATH
          git pull

      - name: Load Custom Feeds
        run: |
          [ -e $FEEDS_SH ] && cp -r $FEEDS_SH $OPENWRT_ROOT_PATH/$FEEDS_SH
          cd $OPENWRT_ROOT_PATH
          chmod +x $FEEDS_SH
          $OPENWRT_ROOT_PATH/$FEEDS_SH

      - name: Install Feeds
        run: |
          cd $OPENWRT_ROOT_PATH
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load Custom Configuration
        run: |
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_ROOT_PATH/.config
          [ -e $SETTINGS_SH ] && cp $SETTINGS_SH $OPENWRT_ROOT_PATH/$SETTINGS_SH
          cd $OPENWRT_ROOT_PATH
          chmod +x $SETTINGS_SH
          $OPENWRT_ROOT_PATH/$SETTINGS_SH
          make defconfig

      - name: Compile Packages
        run: |
          cd $OPENWRT_ROOT_PATH
          echo -e "$(nproc) thread compile"
          make buildinfo
          make diffconfig buildversion feedsversion
          make target/compile -j$(nproc) IGNORE_ERRORS="m n" BUILD_LOG=1 || \
          yes n | make target/compile -j1 V=s IGNORE_ERRORS=1
          make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
          make package/index

      - name: Generate Firmware
        id: generate
        run: |
          if grep -q $DEVICE_TARGET/$DEVICE_SUBTARGET $GITHUB_WORKSPACE/data/support-targets.txt; then
            mkdir -p $OPENWRT_ROOT_PATH/files/etc/opkg
            cd $OPENWRT_ROOT_PATH/files/etc/opkg
            cp $GITHUB_WORKSPACE/data/opkg/distfeeds.conf .
            sed -i "s/DEVICE_SUBTARGET/$DEVICE_SUBTARGET/g" distfeeds.conf
            sed -i "s/DEVICE_TARGET/$DEVICE_TARGET/g" distfeeds.conf
            sed -i "s/DEVICE_PLATFORM/$DEVICE_PLATFORM/g" distfeeds.conf
            cd $OPENWRT_ROOT_PATH
            cd usign
            cmake .
            make
            sudo mv usign /bin
            mkdir -p $OPENWRT_ROOT_PATH/files/etc/opkg/keys
            cd $OPENWRT_ROOT_PATH/files/etc/opkg/keys
          fi
          cd $OPENWRT_ROOT_PATH
          make package/install -j$(nproc) || make package/install -j1 V=s
          make target/install -j$(nproc) || make target/install -j1 V=s
          make json_overview_image_info
          make checksum

      - name: Print Sha256sums
        run: |
          cd $OPENWRT_ROOT_PATH/bin/targets/$DEVICE_TARGET/$DEVICE_SUBTARGET
          cat sha256sums

      - name: Compress Bin Folder
        run: |
          cd $OPENWRT_ROOT_PATH
          zip -9 -r $DEVICE_TARGET-$DEVICE_SUBTARGET.zip bin

      - name: Print Disk Usage
        if: always()
        run: |
          echo 'lsblk -f'
          lsblk -f
          echo '-----'
          echo 'df -h'
          df -h
          echo '-----'
          echo 'btrfs filesystem usage'
          sudo btrfs filesystem usage $GITHUB_WORKSPACE
          echo '-----'

      - name: Upload Bin Archive
        uses: actions/upload-artifact@main
        with:
          name: bin-archive
          path: ${{ env.OPENWRT_ROOT_PATH }}/${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}.zip

  Upload:
    needs: [Mainbuild, Prebuild]
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Restore Variables
        run: |
          echo "CURRENT_BRANCH=$(echo '${{needs.Prebuild.outputs.CURRENT_BRANCH}}')" >> $GITHUB_ENV
          echo "OPENWRT_ROOT_PATH=$(echo '${{needs.Prebuild.outputs.OPENWRT_ROOT_PATH}}')" >> $GITHUB_ENV
          echo "SOURCE_OWNER=$(echo '${{needs.Prebuild.outputs.SOURCE_OWNER}}')" >> $GITHUB_ENV
          echo "SOURCE_REPO=$(echo '${{needs.Prebuild.outputs.SOURCE_REPO}}')" >> $GITHUB_ENV
          echo "DEVICE_PLATFORM=$(echo '${{needs.Prebuild.outputs.DEVICE_PLATFORM}}')" >> $GITHUB_ENV
          echo "DEVICE_TARGET=$(echo '${{needs.Prebuild.outputs.DEVICE_TARGET}}')" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$(echo '${{needs.Prebuild.outputs.DEVICE_SUBTARGET}}')" >> $GITHUB_ENV
          echo "COMBO_IMAGE=$(echo '${{needs.Prebuild.outputs.COMBO_IMAGE}}')" >> $GITHUB_ENV

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install zip unzip rsync
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

      - name: Download Bin Archive
        uses: actions/download-artifact@main
        with:
          name: bin-archive
          path: ${{ env.OPENWRT_ROOT_PATH }}

      - name: Decompress Bin Archive
        run: |
          cd $OPENWRT_ROOT_PATH
          unzip $DEVICE_TARGET-$DEVICE_SUBTARGET.zip

      - name: Organize Files
        run: |
          export BUILD_DATE=$(date +"%Y-%m-%d")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          cd $OPENWRT_ROOT_PATH/bin/targets/$DEVICE_TARGET/$DEVICE_SUBTARGET
          rm -rf packages
          df -hT $PWD

      - name: Delete Old Firmware Assets
        if: env.FIRMWARE_RELEASE_UPLOAD == 'true'
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          fail-if-no-assets: false
          fail-if-no-release: false
          assets: "*"

      - name: Deploy Files To Release
        uses: ncipollo/release-action@main
        if: env.FIRMWARE_RELEASE_UPLOAD == 'true'
        with:
          name: openwrt-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          allowUpdates: true
          replacesArtifacts: true
          tag: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          body: ${{ env.BUILD_DATE }}
          commit: ${{ env.CURRENT_BRANCH }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.OPENWRT_ROOT_PATH }}/bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/*
